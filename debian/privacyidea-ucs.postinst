#!/bin/sh
# see: dh_installdeb(1)

set -e

# source debconf library
. /usr/share/debconf/confmodule

# Source dbconfig-common functions
if [ -f /usr/share/dbconfig-common/dpkg/postinst.pgsql  ]; then
  . /usr/share/dbconfig-common/dpkg/postinst.pgsql
fi

USERNAME=privacyidea

if test -f /etc/default/privacyidea; then
    . /etc/default/privacyidea
    # If the daemon user was changed,
    # we set other access rights
    USERNAME=$USER
fi

TEMPADMIN="tempadmin"

create_user() {
        useradd -r $USERNAME -m || true
}

create_files() {
        mkdir -p /var/log/privacyidea
        mkdir -p /var/lib/privacyidea
        touch /var/log/privacyidea/privacyidea.log
	. /opt/privacyidea/privacyidea-venv/bin/activate
        pi-manage create_enckey || true
        pi-manage createdb || true
        pi-manage create_audit_keys || true
	pi-manage policy create tokenlabel enrollment "tokenlabel=<u>@<r>/<s>" || true
        chown -R $USERNAME /var/log/privacyidea
        chown -R $USERNAME /var/lib/privacyidea
        chown -R $USERNAME /etc/privacyidea
        chmod 600 /etc/privacyidea/enckey
        chmod 600 /etc/privacyidea/private.pem
	# we need to change access right, otherwise each local user could call
	# pi-manage
	chgrp root /etc/privacyidea/pi.cfg
	chmod 640 /etc/privacyidea/pi.cfg
}

adapt_pi_cfg() {
	if [ !$(grep "^PI_PEPPER" /etc/privacyidea/pi.cfg) ]; then
	    # PEPPER does not exist, yet
	    PEPPER="$(tr -dc A-Za-z0-9_ </dev/urandom | head -c24)"
	    echo "PI_PEPPER = '$PEPPER'" >> /etc/privacyidea/pi.cfg
	fi
	if [ !$(grep "^SECRET_KEY" /etc/privacyidea/pi.cfg || true) ]; then
	    # SECRET_KEY does not exist, yet
	    SECRET="$(tr -dc A-Za-z0-9_ </dev/urandom | head -c24)"
	    echo "SECRET_KEY = '$SECRET'" >> /etc/privacyidea/pi.cfg
	fi
	if [ !$(grep "^PI_INIT_CHECK_HOOK" /etc/privacyidea/pi.cfg || true) ]; then
	    # Hook does not exist, yet
	    echo "PI_INIT_CHECK_HOOK = 'privacyidea.lib.subscription.check_subscription'" >> /etc/privacyidea/pi.cfg
	fi
}

create_database() {
	# create the MYSQL database
	if [ !$(grep "^SQLALCHEMY_DATABASE_URI = 'pymysql" /etc/privacyidea/pi.cfg || true) ]; then
	    USER="root"
	    PASSWORD=$(grep "^password" /etc/mysql/debian.cnf | sort -u | cut -d " " -f3)
	    NPW="$(tr -dc A-Za-z0-9_ </dev/urandom | head -c12)"
	    mysql -u $USER --password=$PASSWORD -e "create database pi;" || true
	    mysql -u $USER --password=$PASSWORD -e "grant all privileges on pi.* to 'pi'@'localhost' identified by '$NPW';"
	    echo "SQLALCHEMY_DATABASE_URI = 'pymysql://pi:$NPW@localhost/pi'" >> /etc/privacyidea/pi.cfg
	fi
}

update_database() {
	. /opt/privacyidea/privacyidea-venv/bin/activate
        # Set the version to the first PI 2.0 version
        pi-manage db stamp 4f32a4e1bf33 -d /opt/privacyidea/privacyidea-venv/lib/privacyidea/migrations
        # Upgrade the database
        pi-manage db upgrade -d /opt/privacyidea/privacyidea-venv/lib/privacyidea/migrations/
}

enable_apache() {
        a2enmod wsgi
        a2ensite privacyidea
}


enable_weblink() {
	export P="ucs/web/overview/entries/service"
	APP=privacyIDEA
	HOSTNAME=$(ucr get hostname)
	DOMAINNAME=$(ucr get domainname)
	ucr set \
		"$P/$APP"/description/de="Zwei-Faktor-Authentisierung" \
		"$P/$APP"/description="Two-Factor-Authentication" \
		"$P/$APP"/icon="/icon/privacyIDEA.png" \
		"$P/$APP"/label/de="privacyIDEA" \
		"$P/$APP"/label="privacyIDEA" \
		"$P/$APP"/link="/privacyidea/" \
		"$P/$APP"/priority=12
}

case "$1" in

  configure)
	create_user
	adapt_pi_cfg
	create_database

	a2dissite privacyidea
        dpkg-maintscript-helper rm_conffile /etc/apache2/sites-available/privacyidea 2.18.1-1~ -- "$@"
	enable_apache

	create_files
#	enable_weblink
	update_database
	update-rc.d apache2 defaults
	# automatic update tests could fail otherwise
	service apache2 restart || true
  ;;

  abort-upgrade|abort-remove|abort-deconfigure)
    exit 0
  ;;

  *)
    echo "postinst called with unknown argument \`$1'" >&2
    exit 1
  ;;

esac


#DEBHELPER#

db_stop

exit 0
